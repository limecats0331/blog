{"componentChunkName":"component---src-templates-post-jsx","path":"/LIS/","result":{"data":{"site":{"siteMetadata":{"title":"limecats"}},"markdownRemark":{"id":"c40ed68b-a6e4-57a7-8edd-5389ca1d5859","excerpt":"LIS(최장 증가 부분 순열) 개념 어떠한 순열이 주어졌을 때, 그 수열에서 순서를 바꾸지 않고 일부 원소를 뽑아서 새로 만든 수열을 이라고 한다.\n이 수열이 오름차순으로 되어 있으면 이 되는 것이다.\n이렇게 만들어진 수열 중에 가장 긴 수열을 (촤장 증가 부분 순열) 이라고 한다. 예시 4 2 1 3 5 8 6 7 위와 같은 순열이 주어졌을 때,는 다음…","html":"<h1>LIS(최장 증가 부분 순열)</h1>\n<h2>개념</h2>\n<p>어떠한 순열이 주어졌을 때, 그 수열에서 순서를 바꾸지 않고 일부 원소를 뽑아서 새로 만든 수열을 <code class=\"language-text\">부분 수열</code>이라고 한다.\n이 수열이 오름차순으로 되어 있으면 <code class=\"language-text\">증가 부분 수열</code>이 되는 것이다.\n이렇게 만들어진 수열 중에 가장 긴 수열을 <code class=\"language-text\">LIS</code>(촤장 증가 부분 순열) 이라고 한다.</p>\n<h3>예시</h3>\n<table>\n<thead>\n<tr>\n<th>4</th>\n<th>2</th>\n<th>1</th>\n<th>3</th>\n<th>5</th>\n<th>8</th>\n<th>6</th>\n<th>7</th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<p>위와 같은 순열이 주어졌을 때,<code class=\"language-text\">LIS</code>는 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th>2</th>\n<th>3</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<h2>알고리즘</h2>\n<h3>DP 활용 (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">N^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>)</h3>\n<p><code class=\"language-text\">dp[i]</code>는 <code class=\"language-text\">arrs[i]</code>를 마지막으로 하는 최장 길이의 순열로 설정하였다.\n이때, <code class=\"language-text\">0</code>부터 <code class=\"language-text\">N</code>까지 탐색을 하면서 <code class=\"language-text\">N</code> 미만의 <code class=\"language-text\">arrs[i]</code> 보다 작으면서 <code class=\"language-text\">dp</code>가 가장 큰 값에 <code class=\"language-text\">+1</code>을 해주면 된다.</p>\n<p>따라서, 다음과 같은 반복으로 탐색한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">N</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 탐색하면 다음과 같은 결과가 나온다.</p>\n<table>\n<thead>\n<tr>\n<th>---</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrs</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>dp</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>4</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<p>여기서 최장 수열의 길이는 가장 큰 값인 5가 된다.</p>\n<h3>이분 탐색 활용 (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">NlogN</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>)</h3>\n<p>하지만 배열의 원소를 탐색하면서 그 전의 모든 원소를 모두 탐색하기 때문에 O(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">N^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>)의 시간 복잡도를 가진다.\n그래서, N이 커짐에 따라서 시간이 매우 오래 걸린다.</p>\n<p>여기서 이전의 원소를 탐색하는 과정에 이분탐색을 활용해서 O(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">logN</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>)으로 줄인다면 O(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">NlogN</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>)로 줄일 수 있다.</p>\n<p>여기서 중요한 컨셉이 하나 있다.\n같은 길이의 수열이라면 <code class=\"language-text\">최고값이 작어야 뒤의 수열을 만들기 좋다</code>는 것이다.\n위의 수열로 설명하자면 만약 6까지 탐색을 완료했다고 생각해보자 그렇다면 만들 수 있는 최장 수열의 끝은 2가지가 있다.</p>\n<table>\n<thead>\n<tr>\n<th>----</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arr1</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>6</td>\n</tr>\n<tr>\n<td>arr2</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n</tr>\n</tbody>\n</table>\n<p>여기서 마지막으로 들어갈 수 있는 원소는 6과 8이 있다.\n하지만 8이되면 다음으로 9가 들어온다면 수열을 이어갈 수 있지만 7이 온다면 수열을 이어갈 수 없다.\n그래서 뒤에 어떤 숫자가 모른다는 전제하에 같은 길이의 수열이라면 가능한 수 중에 가장 작은 수를 골라야 한다.</p>\n<p>그래서 탐색하면서 <code class=\"language-text\">min</code>이라는 배열인 <strong><code class=\"language-text\">min[n]</code>에  길이가 <code class=\"language-text\">n</code>인 증가 부분 수열의 최소 값</strong>을 넣어주면서 갱신한다.</p>\n<p>위의 예시를 사용해서 어떤 식으로 진행되는지 한번 보도록 하자.</p>\n<ol>\n<li><code class=\"language-text\">i == 1</code></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>---</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrs</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>min</td>\n<td>4</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>첫 원소임으로 첫 값을 그냥 넣어준다.</p>\n<ol start=\"2\">\n<li><code class=\"language-text\">i == 2</code></li>\n</ol>\n<p>마지막 원소가 4임으로 2를 연장해서 길이를 늘릴 수 없다. 하지만\n길이가 1인 배열의 마지막 값보다 작음으로 2로 바뀔 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th>---</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrs</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>min</td>\n<td>2</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li><code class=\"language-text\">i == 3</code></li>\n</ol>\n<p>이전과 마찬가지로 연결해서 늘릴 수는 없고 길이가 1인 배열의 최소값보다 작음으로 바뀔 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th>---</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrs</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>min</td>\n<td>1</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li><code class=\"language-text\">i == 4</code></li>\n</ol>\n<p>여기서는 여태까지 만들어진 최장 수열의 마지막 수보다 크기 때문에 바로 연결해서 길이를 늘릴 수 있다.\n그래서 <code class=\"language-text\">min</code> 배열에 추가해준다.</p>\n<table>\n<thead>\n<tr>\n<th>---</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrs</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>min</td>\n<td>1</td>\n<td>3</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"5\">\n<li><code class=\"language-text\">i == 5</code></li>\n</ol>\n<p><code class=\"language-text\">min</code> 배열의 맨 끝에 있는 원소보다 큼으로 더해서 연장해준다.</p>\n<table>\n<thead>\n<tr>\n<th>---</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrs</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>min</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"6\">\n<li><code class=\"language-text\">i == 6</code></li>\n</ol>\n<p><code class=\"language-text\">min</code> 배열의 맨 끝에 있는 원소보다 큼으로 더해서 연장해준다.</p>\n<table>\n<thead>\n<tr>\n<th>---</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrs</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>min</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"7\">\n<li><code class=\"language-text\">i == 7</code></li>\n</ol>\n<p><code class=\"language-text\">min</code> 배열의 맨 끝보다 작은 원소임으로 교환할 위치를 찾아야 한다. <code class=\"language-text\">min[n-1]</code> 보다 크고 <code class=\"language-text\">min[n]</code> 보다 작은 <code class=\"language-text\">n</code>의 위치로 교환을 하는데, 여기서는 <code class=\"language-text\">n == 4</code> 인 위치이다.</p>\n<p>이때, <code class=\"language-text\">min</code> 배열은 오름차순으로 정렬되어 있기 때문에 이분 탐색을 이용하면 탐색에 필요한 횟수를  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">logN</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 로 줄일 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th>---</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrs</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>min</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>6</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"8\">\n<li><code class=\"language-text\">i == 8</code></li>\n</ol>\n<p>마지막으로 배열의 마지막 수보다 큼으로 연장해서 끝이 난다.</p>\n<table>\n<thead>\n<tr>\n<th>---</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrs</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>min</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4>길이 구하기</h4>\n<p>이 연산으로 <code class=\"language-text\">min</code> 배열의 크기가 최장 증가 부분 수열의 크기가 된다.</p>\n<h4>수열 구하기</h4>\n<p>하지만 여기서 유의해야할 점이 <code class=\"language-text\">min</code> 배열이 <code class=\"language-text\">LIS</code>를 의미하지 않기 때문에 <code class=\"language-text\">LIS</code>를 직접 구하기 위해서는 별도의 추가적인 방법이 필요하다.</p>\n<p>그 방법은 <code class=\"language-text\">min</code> 배열에 넣을 때 몇번째 인덱스에 집어넣는지 저장하는 방법이다.</p>\n<table>\n<thead>\n<tr>\n<th>---</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrs</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>8</td>\n<td>6</td>\n<td>7</td>\n</tr>\n<tr>\n<td>min</td>\n<td>1</td>\n<td>3</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>record</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>4</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">record</code> 배열에는 <code class=\"language-text\">arrs</code> 값이 <code class=\"language-text\">min</code> 배열에 들어갈때 몇 번째 인덱스로 들어가는지 기록한다.\n뒤에서 부터 가장 큰수에서 1씩 빼면서 제일 가까운 수를 사용해서 실제 <code class=\"language-text\">LIS</code> 배열을 찾을 수 있다.</p>\n<h2>코드</h2>\n<h3>길이 구하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LIS</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> min <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> minIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        min<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">[</span>minIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                min<span class=\"token punctuation\">[</span>minIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                minIdx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> change <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> minIdx<span class=\"token punctuation\">,</span> arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>change <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    change <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>change <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                min<span class=\"token punctuation\">[</span>change<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3><code class=\"language-text\">LIS</code> 구하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LISTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> min <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> record <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> minIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        min<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">[</span>minIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                min<span class=\"token punctuation\">[</span>minIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                minIdx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> change <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> minIdx<span class=\"token punctuation\">,</span> arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>change <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    change <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>change <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                min<span class=\"token punctuation\">[</span>change<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minIdx<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">LIS</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>minIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> minIdx<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> countLIS <span class=\"token operator\">=</span> minIdx<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token constant\">LIS</span><span class=\"token punctuation\">[</span>countLIS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                countLIS <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                count <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LIS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>마치며</h2>\n<p>정확히 LIS구할 때 사용하는 배열이 무엇을 뜻하는지 모른채로 알고리즘 설명만 있는 글들이 많아서 이해하기가 어려웠다.</p>\n<p>만약 레퍼런스의 블로그를 찾지 못했다면 아직도 검색하고 있었을 것이다...</p>\n<p>내가 글을 잘 쓰는 편은 아니지만 나 나름대로 최대한 이해하기 쉽게 풀어쓰려고 노력했고, 처음 봤던 블로그의 주소도 남겨뒀으니 비슷하게 이해가 안되는 사람들에게 도움이 되었으면 좋겠다.</p>\n<h2>Reference</h2>\n<p><a href=\"https://loosie.tistory.com/376\">[알고리즘] 가장 긴 증가하는 부분 수열 LIS - DP &#x26; 이진탐색 (Java)</a></p>","frontmatter":{"title":"LIS","date":"August 16, 2022","update":"August 16, 2022","tags":["LIS"],"series":"Algorithm"},"fields":{"slug":"/LIS/","readingTime":{"minutes":12.435}}},"seriesList":{"edges":[{"node":{"id":"a9282f4b-5980-5e7c-ab5f-9ddfdfe7f98a","fields":{"slug":"/baekjoon_2457/"},"frontmatter":{"title":"백준 2457번 공주님의 정원"}}},{"node":{"id":"9e6ddead-22db-5c97-99c8-e707a89a2297","fields":{"slug":"/baekjoon_1912/"},"frontmatter":{"title":"백준 1912번 연속합"}}},{"node":{"id":"85ee0f72-fdf5-5b60-82e2-bdddf232cff8","fields":{"slug":"/Next_permutation/"},"frontmatter":{"title":"Next Permutation"}}},{"node":{"id":"c40ed68b-a6e4-57a7-8edd-5389ca1d5859","fields":{"slug":"/LIS/"},"frontmatter":{"title":"LIS"}}},{"node":{"id":"84a8a250-5d32-536b-9452-d505b8cb6127","fields":{"slug":"/watering/"},"frontmatter":{"title":"watering"}}}]},"previous":{"fields":{"slug":"/Next_permutation/"},"frontmatter":{"title":"Next Permutation"}},"next":{"fields":{"slug":"/StringFormat/"},"frontmatter":{"title":"StringFormat"}}},"pageContext":{"id":"c40ed68b-a6e4-57a7-8edd-5389ca1d5859","series":"Algorithm","previousPostId":"85ee0f72-fdf5-5b60-82e2-bdddf232cff8","nextPostId":"224a90fb-42a1-5491-bcb5-f8e2daf9366d"}},"staticQueryHashes":[]}