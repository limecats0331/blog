{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"스프링 스프링은 자바 언어 기반의 프레임워크이고\n자바 언어의 가장 큰 특징은 객체 지향 언어라는 것이다. 스프링은 이런 자바의 객체 지향 언어의 특징을 잘 살려내는 프레임워크이다.\n따라서 스프링은 좋은 객체 지향 어플리케이션을 개발할 수 있게 도와준다. 좋은 객체 지향이란? 객체 지향으로 설계한 프로그램은 유연하고 변경이 용이하다. 다형성 컴포넌트를 쉽고…","fields":{"slug":"/spring_basic/"},"frontmatter":{"date":"September 21, 2022","title":"Spring의 핵심개념","tags":["Spring","OOP"]},"rawMarkdownBody":"\n## 스프링\n스프링은 자바 언어 기반의 프레임워크이고\n자바 언어의 가장 큰 특징은 객체 지향 언어라는 것이다.\n\n스프링은 이런 자바의 객체 지향 언어의 특징을 잘 살려내는 프레임워크이다.\n따라서 스프링은 좋은 객체 지향 어플리케이션을 개발할 수 있게 도와준다.\n\n## 좋은 객체 지향이란?\n객체 지향으로 설계한 프로그램은 유연하고 변경이 용이하다.\n\n### 다형성\n컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는것\n\tex) 운전자가 자동차가 만약에 다른 자동차로 바뀐다고 해도 자동차가 하는 역활에 따라서 자동차가 구현되었기 때문에 운전하는데 크게 문제가 없다.\n\n따라서 클라이언트는 대상의 역활(인터페이스)만 알면 된다.\n내부구조를 몰라도 되며 내부 구조가 변경되어도 영향을 받지 않고 대상 자체를 변경해도 영향을 받지 않는다.\n자바에서는 역활은 인터페이스, 구현은 인터페이스를 구현한 클래스인 구현 객체로 된다.\n\n곧, 다형성의 본질은 클라이언트를 변경하지 않고도 서버의 구현 기능을 유연하게 변경할 수 있는 것이다.\n\n따라서 인터페이스를 안정적으로 잘 설계하는 것이 중요하다.\n만약, 인터페이스가 바뀌면 큰 변경이 발생한다.\n\t자동차가 비행기로 바뀐다면?\n\n스프링은 다형성을 극대화해서 이용할 수 있다.\n스프링에서 이야기하는 제어의 역전(ioc), 의존관계 주입(di)은 다형성을 활용해서 역활과 구현을 편리하게 다룰 수 있도록 지원한다.\n\n### 좋은 객체 지향 설계의 5가지 원칙(`SOLID`)\n#### 1. `SRP` - 단일 책임 원칙(`Single Responsibility Principle`)\n\n한 클래스는 하나의 책임만 가져야 한다.\n중요한 기준은 `변경`이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것이다.\n\n#### 2. `OCP` - 개방-폐쇄 원칙(`Open/Closed Principle`)\n\n확장에는 열려 있으나, 변경에는 닫혀 있어야 한다.\n\n##### 문제점\n구현 객체를 변경하려면 클라이언트 코드를 변경해야 한다.\n분명 다형성을 사용했지만 `OCP` 원칙을 지킬 수 없다.\n\t이 문제를 해결하기 위해서는 객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자가 필요하다. 이 역활을 `스프링 컨테이너`가 한다.\n\n#### 3. `LSP` - 리스코프 치환 원칙(`Liskov Substitution Principle`)\n\n다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것이다.\n다형성을 지원하기 위한 원칙이며, 인터페이스를 구현한 구현체는 믿고 사용하려면, 이 원칙이 필요하다.\n단순히 컴파일 단계에서 성공하고 실패하는 것을 넘어서 지켜야하는 규칙이다.\n\t자동차 인터페이스의 액셀은 앞으로 가라는 기능이며, 이를 뒤로 가도록 구현하면 LSP에 위반되는 것이다. 속도가 다르더라도 앞으로 가게 만들어야 한다.\n\n#### 4 . `ISP` - 인터페이스 분리 원칙(`Interface Segregation Principle`)\n\n특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.\n\n자동차 클라이언트를 운전 인터페이스 + 정비 인터페이스로 분리하면 정비 인터페이스 자체가 변해도 운전자 클리이언트에 영향을 주지 않는다.\n인터페이스가 명확해지고, 대체 가능성이 높아진다.\n\n#### 5. `DIP` - 의존관계 역전 원칙(`Dependency Inversion Principle`)\n\n추상화에 의존해야지, 구체화에 의존하면 안된다.\n쉽게 설명하지면 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻이다.\n\n앞에서 이야기한 역활에 의존하게 해야 한다는 것과 같다.\n클라이언트도 인터페이스를 의존해야 유연하게 구현체를 변경할 수 있다.\n구현체에 의존하게 되면 변경이 아주 어려워 진다.\n\n```java\nMemberRepository m = new MemoryMemberRepository();\n```\n위와 같은 코드는 `DIP`위반이다. 인터페이스와 구현 클래스에 동시에 의존하고 있기 때문에\n\n## 정리\n\n다형성이 핵심이지만 다형성만으로는 OCP,DIP를 지킬 수 없다.\n그렇기 때문에 뭔가가 더 필요하다.\n그 무언가의 역활을 `스프링`이 해주게 된다.\n\n### 스프링\n\n스프링은 다음 기술로 다형성 + OCP, DIP를 가능하게 지원한다.\n1. `DI`(`Dependency Injection`) : 의존 관계, 의존성 주입\n2. `DI 컨테이너` 제공\n\n클라이언트 코드의 변경 없이 기능 확장할 수 있다.\n\n순수하게 자바로 `OCP`, `DIP` 원칙들을 지키면서 개발해보면 결국 스프링의 `DI 컨테이너`를 만들게 된다.\n\n### 실무적인 고민\n\n인터페이스를 도입하면 추상화라는 비용이 발생한다.\n\t코드를 한번 더 열어봐야 한다.\n\n그래서 만약, 기능을 확장할 가능성이 없다면, 구현 클래스를 직접 사용하고, 향후 꼭 필요할 때 리팩터링해서 인터페이스를 도입하는 것도 괜찮은 방법이다.\n\n\n"},{"excerpt":"문제 링크 문제 요약 N개의 논에 물을 대야 하는데 방법이 2가지 있다.\n하나는 직접 논에 우물을 파는 것이고 다른 하나는 이미 물이 있는 논에서 물을 끌어오는 방법이다.\n각 논에서 우물을 파는 비용과 다른 논 사이에서 물을 끌어오는 비용이 주어질 때 모든 논에 물을 대는 최소값을 구하여라. 문제 풀이 처음에는 논 중에 최소비용으로 팔 수 있는 곳을 찾아…","fields":{"slug":"/watering/"},"frontmatter":{"date":"September 01, 2022","title":"watering","tags":["Baekjoon","MST"]},"rawMarkdownBody":"\n[문제 링크](https://www.acmicpc.net/problem/1368)\n\n## 문제 요약\n\nN개의 논에 물을 대야 하는데 방법이 2가지 있다.\n하나는 직접 논에 우물을 파는 것이고 다른 하나는 이미 물이 있는 논에서 물을 끌어오는 방법이다.\n각 논에서 우물을 파는 비용과 다른 논 사이에서 물을 끌어오는 비용이 주어질 때 모든 논에 물을 대는 최소값을 구하여라.\n\n## 문제 풀이\n\n처음에는 논 중에 최소비용으로 팔 수 있는 곳을 찾아서 거기서부터 최소 신장 트리를 구해서 값을 구하고자 했다.\n\n하지만 제대로 구해지지 않았고 이후 검색을 통해 최소 신장 트리는 노드가 아닌 엣지를 기준으로 검색하는 것이니깐 자기 자신이 우물을 파는 것을 임의의 노드에서 출발하는 값이라고 생각하고 풀면 쉽게 풀 수 있다는 것을 알게 되었다.\n\n굳이 풀어서 설명하자면 우물을 통해서 지하에서 물을 끌어오는 것이라고 생각하고 지하도 노드에 추가하는 것이다.\n\n그래서 입력받을 때 우물을 파는 것은 0에서 연결한다고 생각하고 엣지를 만들어서 크루스칼을 이용해서 풀었다.\n\n## 코드\n\n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class algo_1368 {\n    static int[] root;\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n        int N = Integer.parseInt(br.readLine().trim());\n\n        makeSet(N + 1);\n\n        List<Node> nodes = new ArrayList<>();\n\n        for (int i = 0; i < N; i++) {\n            nodes.add(new Node(0, i + 1, Integer.parseInt(br.readLine().trim())));\n        }\n\n        for (int i = 0; i < N; i++) {\n            String[] input = br.readLine().trim().split(\" \");\n            for (int j = 0; j < N; j++) {\n                if (i == j) continue;\n                nodes.add(new Node(i + 1, j + 1, Integer.parseInt(input[j])));\n            }\n        }\n\n        Collections.sort(nodes);\n\n        int res = 0;\n        int cnt = 0;\n        for (Node n : nodes) {\n            if (unionSet(n.from, n.to)) {\n                res += n.weight;\n                cnt += 1;\n            }\n            if (cnt == N) {\n                break;\n            }\n        }\n\n        System.out.println(res);\n    }\n\n    static boolean unionSet(int from, int to) {\n        from = findRoot(from);\n        to = findRoot(to);\n        if (from == to) return false;\n        root[from] = to;\n        return true;    }\n\n    static int findRoot(int n) {\n        if (n == root[n]) return n;\n        return root[n] = findRoot(root[n]);\n    }\n\n    static void makeSet(int N) {\n        root = new int[N];\n        for (int i = 0; i < N; i++) {\n            root[i] = i;\n        }\n    }\n\n    static class Node implements Comparable<Node> {\n        int from;\n        int to;\n        int weight;\n\n        public Node(int from, int to, int weight) {\n            this.from = from;\n            this.to = to;\n            this.weight = weight;\n        }\n\n        @Override\n        public int compareTo(Node n) {\n            return this.weight - n.weight;\n        }\n    }\n}\n```\n\n\n## 배운 점\n\n최소 신장 트리는 엣지를 기준으로 생각하자 엣지가 없다면 임의의 노드에서 연결하는 엣지를 만들어서 생각해볼 수 있다.\n"},{"excerpt":"문제 인식 해당 문제를 푸는데  방식을 사용해서 풀었더니 시간 초과가 발생했다.\n브론즈 문제에서 별 다른 알고리즘으로 최적화하는 것은 아니라고 생각해서 문자열을 로 만들어서 합쳤더니 시간내로 들어오게 되었다. 그래서 얼마나 시간 차이가 나는지 왜 이렇게 시간 차이가 나는지 궁금해서 찾아보게 되었다. 테스트 에서는 다른 방법으로 성능 테스트를 하지만 어떤 …","fields":{"slug":"/StringFormat/"},"frontmatter":{"date":"August 22, 2022","title":"StringFormat","tags":["Java"]},"rawMarkdownBody":"\n\thttps://www.acmicpc.net/problem/20299\n\tstring format 방식을 사용하면 시간초과가 나는데 왜 나고 무슨 차이가 있을까?\n\n## 문제 인식\n\n해당 문제를 푸는데 `String Fomat` 방식을 사용해서 풀었더니 시간 초과가 발생했다.\n브론즈 문제에서 별 다른 알고리즘으로 최적화하는 것은 아니라고 생각해서 문자열을 `StringBuilder`로 만들어서 합쳤더니 시간내로 들어오게 되었다.\n\n그래서 얼마나 시간 차이가 나는지 왜 이렇게 시간 차이가 나는지 궁금해서 찾아보게 되었다.\n\n## 테스트\n\n`stackOverFlow`에서는 다른 방법으로 성능 테스트를 하지만 어떤 식으로 측정하는지 잘 모르겠고 댓글에 틀린 측정 방법이라는 말이 많아서 그냥 신경 안쓰고 무식하게 출력해보기로 했다.\n\n10자리 순열을 `Next Permutation`을 이용해서 출력해볼 것이다.\n\n![result](./StringBuilder_formating_compare.png)\n\n결과를 보면 약 11.5배의 차이를 보이게 된다.\n\n## 이유\n\n`StringFormat` 내부에서 정규식을 사용해서 삽입할 위치를 찾아주고 해당 위치에 넣는 작업을 따로 수행하기 때문이였다.\n\n## 결론\n\n찾아보니 서버에서 로그 출력시 짧은 시간에 많은 로그를 출력할 때 문제가 발생하기도 한다고 한다.\n출력이 많이 필요한 경우에는 사용을 자제하고 코테에서는 `StringBuilder`를 쓰거나 내부적으로는 똑같다고 하니 그냥 `+`를 사용해야될 것 같다.\n"},{"excerpt":"LIS(최장 증가 부분 순열) 개념 어떠한 순열이 주어졌을 때, 그 수열에서 순서를 바꾸지 않고 일부 원소를 뽑아서 새로 만든 수열을 이라고 한다.\n이 수열이 오름차순으로 되어 있으면 이 되는 것이다.\n이렇게 만들어진 수열 중에 가장 긴 수열을 (촤장 증가 부분 순열) 이라고 한다. 예시 4 2 1 3 5 8 6 7 위와 같은 순열이 주어졌을 때,는 다음…","fields":{"slug":"/LIS/"},"frontmatter":{"date":"August 16, 2022","title":"LIS","tags":["LIS"]},"rawMarkdownBody":"\n# LIS(최장 증가 부분 순열)\n\n## 개념\n\n어떠한 순열이 주어졌을 때, 그 수열에서 순서를 바꾸지 않고 일부 원소를 뽑아서 새로 만든 수열을 `부분 수열`이라고 한다.\n이 수열이 오름차순으로 되어 있으면 `증가 부분 수열`이 되는 것이다.\n이렇게 만들어진 수열 중에 가장 긴 수열을 `LIS`(촤장 증가 부분 순열) 이라고 한다.\n\n### 예시\n\n| 4   | 2   | 1   | 3   | 5   | 8   | 6   | 7   |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n\n위와 같은 순열이 주어졌을 때,`LIS`는 다음과 같다.\n\n | 2   | 3   | 5   | 6   | 7   |\n | --- | --- | --- | --- | --- |\n\n## 알고리즘\n\n### DP 활용 ($N^2$)\n\n`dp[i]`는 `arrs[i]`를 마지막으로 하는 최장 길이의 순열로 설정하였다.\n이때, `0`부터 `N`까지 탐색을 하면서 `N` 미만의 `arrs[i]` 보다 작으면서 `dp`가 가장 큰 값에 `+1`을 해주면 된다.\n\n따라서, 다음과 같은 반복으로 탐색한다.\n```java\nfor (int i = 0; i < N ; i++){\n\tfor (int j = 0; j < i ; j++){\n\t\tif(arrs[j] <= arrs[i] && dp[i] <= dp[j]){\n\t\t\tdp[i] = dp[j];\n\t\t}\n\t}\n\tdp[i] += 1;\n}\n```\n\n이렇게 탐색하면 다음과 같은 결과가 나온다.\n\n| ---  | 0   | 1   | 2   | 3   | 4   | 5   | 6   | 7   |\n| ---- | --- | --- | --- | --- | --- | --- | --- | --- |\n| arrs | 4   | 2   | 1   | 3   | 5   | 8   | 6   | 7   |\n| dp   | 1   | 1   | 1   | 2   | 3   | 4   | 4   | 5   |\n\n여기서 최장 수열의 길이는 가장 큰 값인 5가 된다.\n\n\n### 이분 탐색 활용 ($NlogN$)\n\n하지만 배열의 원소를 탐색하면서 그 전의 모든 원소를 모두 탐색하기 때문에 O($N^2$)의 시간 복잡도를 가진다.\n그래서, N이 커짐에 따라서 시간이 매우 오래 걸린다.\n\n여기서 이전의 원소를 탐색하는 과정에 이분탐색을 활용해서 O($logN$)으로 줄인다면 O($NlogN$)로 줄일 수 있다.\n\n여기서 중요한 컨셉이 하나 있다.\n같은 길이의 수열이라면 `최고값이 작어야 뒤의 수열을 만들기 좋다`는 것이다.\n위의 수열로 설명하자면 만약 6까지 탐색을 완료했다고 생각해보자 그렇다면 만들 수 있는 최장 수열의 끝은 2가지가 있다.\n\n| ---- | 0   | 1   | 2   | 3   |\n| ---- | --- | --- | --- | --- |\n| arr1 | 1   | 3   | 5   | 6   |\n| arr2 | 1   | 3   | 5   | 8   |\n\n여기서 마지막으로 들어갈 수 있는 원소는 6과 8이 있다.\n하지만 8이되면 다음으로 9가 들어온다면 수열을 이어갈 수 있지만 7이 온다면 수열을 이어갈 수 없다.\n그래서 뒤에 어떤 숫자가 모른다는 전제하에 같은 길이의 수열이라면 가능한 수 중에 가장 작은 수를 골라야 한다.\n\n그래서 탐색하면서 `min`이라는 배열인 **`min[n]`에  길이가 `n`인 증가 부분 수열의 최소 값**을 넣어주면서 갱신한다.\n\n위의 예시를 사용해서 어떤 식으로 진행되는지 한번 보도록 하자.\n\n1. `i == 1`\n\n| ---  | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   |\n| ---- | --- | --- | --- | --- | --- | --- | --- | --- |\n| arrs | 4   | 2   | 1   | 3   | 5   | 8   | 6   | 7   |\n| min  | 4   |    |    |    |    |    |    |    |\n\n첫 원소임으로 첫 값을 그냥 넣어준다.\n\n2. `i == 2`\n\n마지막 원소가 4임으로 2를 연장해서 길이를 늘릴 수 없다. 하지만\n길이가 1인 배열의 마지막 값보다 작음으로 2로 바뀔 수 있다.\n\n| ---  | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   |\n| ---- | --- | --- | --- | --- | --- | --- | --- | --- |\n| arrs | 4   | 2   | 1   | 3   | 5   | 8   | 6   | 7   |\n| min  | 2   |    |    |    |    |    |    |    |\n\n3. `i == 3`\n\n이전과 마찬가지로 연결해서 늘릴 수는 없고 길이가 1인 배열의 최소값보다 작음으로 바뀔 수 있다.\n\n| ---  | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   |\n| ---- | --- | --- | --- | --- | --- | --- | --- | --- |\n| arrs | 4   | 2   | 1   | 3   | 5   | 8   | 6   | 7   |\n| min  | 1   |     |     |     |     |     |     |     |\n\n4. `i == 4`\n\n여기서는 여태까지 만들어진 최장 수열의 마지막 수보다 크기 때문에 바로 연결해서 길이를 늘릴 수 있다.\n그래서 `min` 배열에 추가해준다.\n\n| ---  | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   |\n| ---- | --- | --- | --- | --- | --- | --- | --- | --- |\n| arrs | 4   | 2   | 1   | 3   | 5   | 8   | 6   | 7   |\n| min  | 1   | 3   |     |     |     |     |     |     |\n\n5. `i == 5`\n\n`min` 배열의 맨 끝에 있는 원소보다 큼으로 더해서 연장해준다.\n\n| ---  | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   |\n| ---- | --- | --- | --- | --- | --- | --- | --- | --- |\n| arrs | 4   | 2   | 1   | 3   | 5   | 8   | 6   | 7   |\n| min  | 1   | 3   | 5   |     |     |     |     |     |\n\n6. `i == 6`\n\n`min` 배열의 맨 끝에 있는 원소보다 큼으로 더해서 연장해준다.\n\n| ---  | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   |\n| ---- | --- | --- | --- | --- | --- | --- | --- | --- |\n| arrs | 4   | 2   | 1   | 3   | 5   | 8   | 6   | 7   |\n| min  | 1   | 3   | 5   | 8   |     |     |     |     |\n\n7. `i == 7`\n\n`min` 배열의 맨 끝보다 작은 원소임으로 교환할 위치를 찾아야 한다. `min[n-1]` 보다 크고 `min[n]` 보다 작은 `n`의 위치로 교환을 하는데, 여기서는 `n == 4` 인 위치이다.\n\n이때, `min` 배열은 오름차순으로 정렬되어 있기 때문에 이분 탐색을 이용하면 탐색에 필요한 횟수를  $logN$ 로 줄일 수 있다.\n\n| ---  | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   |\n| ---- | --- | --- | --- | --- | --- | --- | --- | --- |\n| arrs | 4   | 2   | 1   | 3   | 5   | 8   | 6   | 7   |\n| min  | 1   | 3   | 5   | 6   |     |     |     |     |\n\n8. `i == 8`\n\n마지막으로 배열의 마지막 수보다 큼으로 연장해서 끝이 난다.\n\n| ---  | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   |\n| ---- | --- | --- | --- | --- | --- | --- | --- | --- |\n| arrs | 4   | 2   | 1   | 3   | 5   | 8   | 6   | 7   |\n| min  | 1   | 3   | 5   | 6   | 7   |     |     |     |\n\n#### 길이 구하기\n이 연산으로 `min` 배열의 크기가 최장 증가 부분 수열의 크기가 된다.\n\n\n#### 수열 구하기\n하지만 여기서 유의해야할 점이 `min` 배열이 `LIS`를 의미하지 않기 때문에 `LIS`를 직접 구하기 위해서는 별도의 추가적인 방법이 필요하다.\n\n그 방법은 `min` 배열에 넣을 때 몇번째 인덱스에 집어넣는지 저장하는 방법이다.\n\n| ---    | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   |\n| ------ | --- | --- | --- | --- | --- | --- | --- | --- |\n| arrs   | 4   | 2   | 1   | 3   | 5   | 8   | 6   | 7   |\n| min    | 1   | 3   | 5   | 6   | 7   |     |     |     |\n| record | 1   | 1   | 1   | 2   | 3   | 4   | 4   | 5   |\n\n`record` 배열에는 `arrs` 값이 `min` 배열에 들어갈때 몇 번째 인덱스로 들어가는지 기록한다.\n뒤에서 부터 가장 큰수에서 1씩 빼면서 제일 가까운 수를 사용해서 실제 `LIS` 배열을 찾을 수 있다.\n\n\n## 코드\n\n### 길이 구하기\n\n```java\nimport java.util.*;\n\npublic class LIS {\n    public static void main(String[] args) throws Exception {\n        int[] arrs = {4, 2, 1, 3, 5, 8, 6, 7};\n        int[] min = new int[8];\n\n        int minIdx = 0;\n        min[0] = arrs[0];\n\n        for (int i = 1; i < 8; i++) {\n            if (min[minIdx] < arrs[i]) {\n                min[minIdx + 1] = arrs[i];\n                minIdx += 1;\n            } else {\n                int change = Arrays.binarySearch(min, 0, minIdx, arrs[i]);\n                if (change < 0) {\n                    change = -(change + 1);\n                }\n                min[change] = arrs[i];\n            }\n        }\n\n        System.out.println(Arrays.toString(arrs));\n        System.out.println(Arrays.toString(min));\n        System.out.println(minIdx + 1);\n    }\n}\n```\n\n### `LIS` 구하기\n\n```java\nimport java.util.Arrays;\n\npublic class LISTest {\n    public static void main(String[] args) throws Exception {\n        int[] arrs = {4, 2, 1, 3, 5, 8, 6, 7};\n        int[] min = new int[8];\n        int[] record = new int[8];\n\n        int minIdx = 0;\n        min[0] = arrs[0];\n\n        for (int i = 1; i < 8; i++) {\n            if (min[minIdx] < arrs[i]) {\n                min[minIdx + 1] = arrs[i];\n                minIdx += 1;\n            } else {\n                int change = Arrays.binarySearch(min, 0, minIdx, arrs[i]);\n                if (change < 0) {\n                    change = -(change + 1);\n                }\n                min[change] = arrs[i];\n            }\n            record[i] = minIdx;\n        }\n\n        int[] LIS = new int[minIdx + 1];\n        int count = minIdx;\n        int countLIS = minIdx;\n        for (int i = 7; i >= 0; i--) {\n            System.out.println(count);\n            if (record[i] == count) {\n                LIS[countLIS] = arrs[i];\n                countLIS -= 1;\n                count -= 1;\n            }\n        }\n\n        System.out.println(Arrays.toString(arrs));\n        System.out.println(Arrays.toString(min));\n        System.out.println(Arrays.toString(record));\n        System.out.println(Arrays.toString(LIS));\n        System.out.println(minIdx + 1);\n\n    }\n}\n```\n\n## 마치며\n\n정확히 LIS구할 때 사용하는 배열이 무엇을 뜻하는지 모른채로 알고리즘 설명만 있는 글들이 많아서 이해하기가 어려웠다.\n\n만약 레퍼런스의 블로그를 찾지 못했다면 아직도 검색하고 있었을 것이다...\n\n내가 글을 잘 쓰는 편은 아니지만 나 나름대로 최대한 이해하기 쉽게 풀어쓰려고 노력했고, 처음 봤던 블로그의 주소도 남겨뒀으니 비슷하게 이해가 안되는 사람들에게 도움이 되었으면 좋겠다.\n\n\n## Reference\n\n[[알고리즘] 가장 긴 증가하는 부분 수열 LIS - DP & 이진탐색 (Java)](https://loosie.tistory.com/376)\n"},{"excerpt":"2457번 공주님의 정원 백준 링크 문제 요약 그리디 알고리즘을 사용해서 꽃의 최소의 갯수를 구하는 문제이다. 과정 처음에는 꽃이 지는 시간을 기준으로 내림차순, 꽃이 피는 시간을 기준으로  오름차순으로 정렬해서 풀었다.\n앞에서부터 탐색해서 끝나는 시간이 제일 긴 것을 골라서 갱신하는 방식이였다. 하지만 계속 앞에서부터 탐색하면서 불필요한 탐색이 많아졌고…","fields":{"slug":"/baekjoon_2457/"},"frontmatter":{"date":"August 13, 2022","title":"백준 2457번 공주님의 정원","tags":["Baekjoon","Greedy"]},"rawMarkdownBody":"\n# 2457번 공주님의 정원\n\n[백준 링크](https://www.acmicpc.net/problem/2457)\n\n## 문제 요약\n\n그리디 알고리즘을 사용해서 꽃의 최소의 갯수를 구하는 문제이다.\n\n## 과정\n\n처음에는 꽃이 지는 시간을 기준으로 내림차순, 꽃이 피는 시간을 기준으로  오름차순으로 정렬해서 풀었다.\n앞에서부터 탐색해서 끝나는 시간이 제일 긴 것을 골라서 갱신하는 방식이였다.\n\n하지만 계속 앞에서부터 탐색하면서 불필요한 탐색이 많아졌고, 최대 입력이 10만개라서 85% 쯤에서 시간 초과가 일어났다.\n\n그래서 다른 방식으로 풀기로 했다.\n\n## 풀이 과정\n\n정렬을 꽃이 피는 시간을 기준으로 오름차순으로 정렬하고, 지는 시간을 기준으로 내림차순으로 정렬한다.\n\n꽃의 시간은 숫자의 형태로 저장한다.\n`flowers.start = 301`\n왜냐하면 만약 월수가 같더라도 비교하기 쉽고 저장하기 쉽기 때문에 이렇게 저장해서 사용했다.\n\n비교를 시작하는데 11월 30일까지 펴야하는데 지는 꽃의 숫자는 포함하지 않기 때문에 12월 1일을 넘길때까지 비교를 반복하게 되었다.\n\n비교하는 중에 비교하는 꽃의 끝이 배열에 담긴 꽃의 시작보다 작다면 비교하는 의미가 없기 때문에 비교를 그만둔다.\n\n그 후에 지는 시간을 비교하면서 가장 큰 값을 찾고 값을 찾았음을 기록해주었다.\n\n그 후에 만약 값을 찾지 못했다면 다음 꽃이 없다는 것을 의미함으로 바로 끝내주었고 아니라면 비교할 값을 갱신하고 꽃의 갯수를 늘려주었다.\n\n## 코드\n```java\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.StringTokenizer;\n\npublic class algo_2457 {\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int flowerCnt = Integer.parseInt(br.readLine().trim());\n        Flower[] flowers = new Flower[flowerCnt];\n        StringTokenizer st;\n        for (int i = 0; i < flowerCnt; i++) {\n            st = new StringTokenizer(br.readLine().trim(), \" \");\n            int startMonth = Integer.parseInt(st.nextToken());\n            int startDay = Integer.parseInt(st.nextToken());\n            int endMonth = Integer.parseInt(st.nextToken());\n            int endDay = Integer.parseInt(st.nextToken());\n            flowers[i] = new Flower(startMonth * 100 + startDay, endMonth * 100 + endDay);\n        }\n\n        Arrays.sort(flowers);\n\n        int startDay = 301;\n        int endDay = 1201;\n        int count = 0;\n        int max = 0;\n        int startIdx = 0;\n        boolean isFind = false;\n\n        while (startDay < endDay) {\n            isFind = false;\n            for (int i = startIdx; i < flowerCnt; i++) {\n                if (flowers[i].start > startDay) {\n                    break;\n                }\n                if (max < flowers[i].end) {\n                    max = flowers[i].end;\n                    startIdx = i + 1;\n                    isFind = true;\n                }\n            }\n            if (isFind) {\n                startDay = max;\n                count += 1;\n            } else {\n                break;\n            }\n        }\n        if (max < endDay) {\n            System.out.println(0);\n        } else {\n            System.out.println(count);\n        }\n\n    }\n\n    static class Flower implements Comparable<Flower> {\n        int start;\n        int end;\n\n        public Flower(int start, int end) {\n            this.start = start;\n            this.end = end;\n        }\n\n        @Override\n        public int compareTo(Flower f) {\n            if (this.start != f.start) {\n                return this.start - f.start;\n            } else {\n                return -this.end + f.end;\n            }\n        }\n    }\n}\n```\n\n## 풀면서 배운 것\n\n1. 시간(월, 일)을 비교할 때는 숫자형식으로 비교하는 것이 더 편하다.\n2. 어떤 객체를 비교하는 경우 클래스로 따로 빼서 만들어서 비교하면 코드 가독성이 더 좋아진다.\n"},{"excerpt":"문제링크 문제 요약 크기가 10만개 이하인 정수로 이루어진 수열이 주어질 때, 연속된 숫자들의 합 중에 가장 큰 수를 구하는 문제 풀이 과정 풀면서 중요했던 점은 이전까지의 과정에서 구한 최대 연속합을 더했을 때 손해(더  작아짐)라면 버리고 새로 더하는 것이다. 예시 index 0 1 2 3 4 5 6 7 8 9 arrs 10 -4 3 1 5 6 -35…","fields":{"slug":"/baekjoon_1912/"},"frontmatter":{"date":"August 13, 2022","title":"백준 1912번 연속합","tags":["Baekjoon","DP"]},"rawMarkdownBody":"\n[문제링크](https://www.acmicpc.net/problem/1912)\n\n## 문제 요약\n\n크기가 10만개 이하인 정수로 이루어진 수열이 주어질 때, 연속된 숫자들의 합 중에 가장 큰 수를 구하는 문제\n\n## 풀이 과정\n\n풀면서 중요했던 점은 이전까지의 과정에서 구한 최대 연속합을 더했을 때 손해(더  작아짐)라면 버리고 새로 더하는 것이다.\n\n### 예시\n\n| index   | 0   | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   |\n| ----- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| arrs | 10  | -4  | 3   | 1   | 5   | 6   | -35 | 12  | 21  | -1  |\n\n수열이 다음과 같이 주어진다고 생각해본다.\n여기서 특정 구간까지의 연속합을 `dp`라고 생각한다.\n\n| index | 0   | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   |\n| ----- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| arrs  | 10  | -4  | 3   | 1   | 5   | 6   | -35 | 12  | 21  | -1  |\n| dp    | 10  | 6   | 9   | 10  | 15  | 21  | -14 | 12  | 33  | 32  |\n\n그럼 0까지의 연속합은 10이 되고 1까지의 연속합의 최대는 6이 된다.\n\n이렇게 6까진 마치 누적합과 같은 모습을 보이게 된다.\n\n하지만 6에서 7로 넘어갈 때를 보면 7의 입장에서 보면 이전까지의 연속합을 더 하는 것이 자신보다 더 작아지게 됨으로 가장 큰 연속합은 아무것도 더하지 않은 자기 자신이 된다.\n\n따라서 7부터 다시 연속된 합을 찾아가는  것이다.\n\n이것을 코드로 표현한다면 다음과 같이 표현할 수 있다.\n\n```java\ndp[i] = Math.max(dp[i-1] + arrs[i], arrs[i]);\n```\n\n## 코드\n\n```java\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\npublic class algo_1912 {\n    public static void main(String[] args) throws Exception {\n\t    //입력\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine().trim());\n        int[] dp = new int[n];\n\n\t\t//숫자를 따로 저장할 필요없이 입력받은 대로 찾을 수 있음.\n        StringTokenizer st = new StringTokenizer(br.readLine().trim(), \" \");\n        dp[0] = Integer.parseInt(st.nextToken());\n        //dp[0]는 첫번째 숫자와 같다.\n        int max = dp[0];\n        //숫자의 갯수만큼 반복해준다.\n        for (int i = 1; i < n; i++) {\n            int num = Integer.parseInt(st.nextToken());\n            dp[i] = Math.max(dp[i - 1] + num, num);\n            max = Math.max(max, dp[i]);\n        }\n        System.out.println(max);\n    }\n}\n```\n\n## 배운 점\n\n앞까지 구한 것이 손해라면 새로 시작한다는 개념 생각할 수 있게 되어서 좋았다.\n"},{"excerpt":"Next Permutation 사전 설명 사전 순서로 다음 순열을 뽑는 알고리즘이다.\n이를 이용해서 다음 순열이 없을 때까지 뽑으면서 순열을 뽑을 수 있는데 재귀를 사용하는 것보다 적은 호출로 순열을 뽑아 낼 수 있다. 단, 이를 활용해서 순열을 뽑을 경우에 전체 중에 특정 갯수만을 뽑는 순열에는 적용할 수 없다.\n또한, , 이 들어있는 배열을 사용해서 …","fields":{"slug":"/Next_permutation/"},"frontmatter":{"date":"August 13, 2022","title":"Next Permutation","tags":["Permutation"]},"rawMarkdownBody":"\n\n\n# Next Permutation\n\n## 사전 설명\n\n사전 순서로 다음 순열을 뽑는 알고리즘이다.\n이를 이용해서 다음 순열이 없을 때까지 뽑으면서 순열을 뽑을 수 있는데 재귀를 사용하는 것보다 적은 호출로 순열을 뽑아 낼 수 있다.\n\n단, 이를 활용해서 순열을 뽑을 경우에 전체 중에 특정 갯수만을 뽑는 순열에는 적용할 수 없다.\n또한, `0`, `1`이 들어있는 배열을 사용해서 조합을 찾는데 사용할 수 있다.\n\n\n## 설명\n\n우선 내림차순으로 정렬된 것이 가장 마지막 순열이라고 보았을 때, 값들은 뒤에서부터 봤을때 모두 점점 커지고 있다.\n만약, `값들이 점점 커지다가 갑자기 작아지는 부분`이 있다면 이곳이 값이 바뀌어야되는 부분이다.\n\n바꿔야 할 부분을 찾았다면 그 값과 바꿔줄 가장 작은 값을 찾아주면 된다.\n\n뒤에서부터 점점 커지다가 작아지는 부분을 찾았기 때문에 뒤에서부터 탐색하면서 비교할 것보다 큰 수를 찾으면 `바꿔줄 가장 작은 수를 찾을 수 있다.`\n\n그렇게 두 값을 변경하고 나면 `나머지 부분들을 다시 오름차순으로 정렬`해주어야 바로 다음의 순열이 된다.\n\n하지만 변경 후에도 그 뒤에 숫자들은 내림차순을 유지하고 있기 때문에 단순히 앞과 뒤를 `스왑`해주는 형식으로 정렬할 수 있다.\n\n\n## 코드\n\n``` java\nimport java.util.Arrays;\n\npublic class NextPermutation {\n    public static void main(String[] args) throws Exception {\n        int[] list = {1, 2, 3, 4, 5};\n\n        do {\n            System.out.println(Arrays.toString(list));\n        } while (np(list));\n    }\n\n\tstatic boolean np(int[] arrs) {\n\t    int N = arrs.length - 1;\n\n\t    //find peak location\n\t    int j = N;\n\t    while (j > 0 && arrs[j] <= arrs[j - 1]) j -= 1;\n\t    j -= 1;\n\t    //return false when already sorted\n\t    if (j < 0) return false;\n\n\t    //find change location\n\t    int k = N;\n\t    while (arrs[k] <= arrs[j]) k -= 1;\n\t    swap(arrs, j, k);\n\t    //sort\n\t    int l = N;\n\t    while (j < l) {\n\t        swap(arrs, j + 1, l);\n\t        j += 1;\n\t        l -= 1;\n\t    }\n\t    return true;\n\t}\n\n    static void swap(int[] arr, int i, int j) {\n        int tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n    }\n}\n```\n\n\n## 조합 찾기\n\n위의 코드에서 길이가 n이고 그중에 1이 r개인 배열을 사용해서 nCr을 구할 수 있다.\n\n```java\npublic static void main(String[] args) throws Exception {\n    int[] list = {0, 0, 0, 1, 1};\n\n    do {\n        System.out.println(Arrays.toString(list));\n    } while (np(list));\n}\n```\n\n\n## 시간 차이\n\n1. use next-permutation\n![next-pumutation](./next_permutation_with_count.png)\n2. use recursive\n![next_permutation](./recursive_permutation_with_count.png)\n\n시간으로는 약 5초 정도 연산 횟수로는 약 2.5배의 차이를 보인다.\n\n## 정리\n앞으로 정말 시간을 타이트하게 줄여야할 상황이 온다면 `next-permutation`을 이용해서 문제를 한번 풀어보자!\n"}]}},"pageContext":{}},"staticQueryHashes":[]}